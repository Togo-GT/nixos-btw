# =============================================================================
# NIXOS SYSTEM CONFIGURATION
# =============================================================================
# This file defines the complete system configuration for NixOS, a purely
# functional Linux distribution. Unlike traditional Linux distributions where
# system configuration is scattered across multiple files, NixOS uses a single
# declarative configuration file that describes the entire system state.
#
# Key Principles:
# - Declarative: You specify WHAT you want, not HOW to achieve it
# - Reproducible: The same configuration will always produce the same system
# - Atomic: Changes are atomic; either completely applied or not at all
# - Rollback: Every configuration change can be easily rolled back
#
# File Structure:
# 1. Imports and variables
# 2. Boot configuration
# 3. Hardware configuration
# 4. Networking
# 5. Internationalization
# 6. Graphical environment
# 7. Audio configuration
# 8. User configuration
# 9. Package management
# 10. System services
# 11. Security settings
# =============================================================================

{ config, pkgs, lib, ... }:

# =============================================================================
# SECTION 1: CONFIGURATION VARIABLES AND IMPORTS
# =============================================================================
# This section defines variables that control conditional configuration elements
# and imports hardware-specific settings generated by NixOS
let
  # GPU Configuration Variable
  # --------------------------
  # This variable controls which GPU drivers and settings are configured.
  # Change this to match your hardware:
  # - "intel": For Intel integrated graphics
  # - "amd": For AMD Radeon graphics cards
  # - "nvidia": For NVIDIA graphics cards (requires proprietary drivers)
  # - "optimus": For NVIDIA Optimus laptops with both Intel and NVIDIA GPUs
  # Technical Details:
  # The lib.optionals function later in the config will use this variable to
  # conditionally include the appropriate graphics packages and settings
  gpuType = "optimus";

in
{
  # Hardware Configuration Import
  # -----------------------------
  # This imports the hardware-specific configuration generated by:
  # $ nixos-generate-config --show-hardware-config
  #
  # The imported file contains:
  # - Filesystem definitions (mount points, swap, etc.)
  # - Kernel modules required for your specific hardware
  # - Hardware-specific settings detected during installation
  imports = [ ./hardware-configuration.nix ];

  # ===========================================================================
  # SECTION 2: BOOT CONFIGURATION
  # ===========================================================================
  # Controls how the system boots, including bootloader and kernel settings
  boot = {
    # Bootloader Configuration
    # ------------------------
    # systemd-boot is a simple UEFI boot manager that is part of systemd.
    # It's more modern and lightweight than GRUB for UEFI systems.
    loader.systemd-boot.enable = true;

    # EFI Variables Access
    # --------------------
    # Allows NixOS to modify EFI boot variables, which is necessary for
    # proper installation of the bootloader on UEFI systems.
    loader.efi.canTouchEfiVariables = true;

    # Kernel Selection
    # ----------------
    # Uses the latest available Linux kernel package for better hardware
    # support, security updates, and newer features.
    kernelPackages = pkgs.linuxPackages_latest;

    # Kernel Parameters
    # -----------------
    # These parameters are passed to the Linux kernel at boot time:
    kernelParams = [
      "quiet"           # Suppresses most boot messages for a cleaner boot experience
      "splash"          # Enables splash screen display during boot
      "nvidia-drm.modeset=1"  # Enables kernel mode setting for NVIDIA GPUs
      "nowatchdog"      # Disables hardware watchdog timer (can cause issues)
      "tsc=reliable"    # Marks Time Stamp Counter as reliable (better performance)
      "nohibernate"     # Disables hibernation to prevent related issues
       "nvreg_EnableMSI=1"  # Aktiverer Message Signaled Interrupts for bedre ydeevne
    ];

    # Initial RAM Disk Modules
    # ------------------------
    # These kernel modules are loaded in the initial ramdisk (initrd) for
    # early system initialization and hardware detection:
    initrd.availableKernelModules = [
      "nvme"       # Support for NVMe solid-state drives
      "xhci_pci"   # USB 3.0 controller support
      "ahci"       # SATA controller support
      "usbhid"     # USB human interface devices (keyboards, mice)
      "usb_storage" # USB storage devices
      "sd_mod"     # SD card reader support
    ];

    # Kernel Modules
    # --------------
    # These kernel modules are loaded at boot time for system functionality:
    kernelModules = [
      "fuse"          # Filesystem in Userspace (for NTFS, SSHFS, etc.)
      "v4l2loopback"  # Virtual video device (for screen recording, virtual cameras)
      "snd-aloop"     # Virtual audio device (for audio routing and recording)
      "nvidia"
      "nvidia_modeset"
      "nvidia_uvm"
      "nvidia_drm"
      "fuse"
      "v4l2loopback"
      "snd-aloop"
    ];
  };

  # ===========================================================================
  # SECTION 3: HARDWARE CONFIGURATION
  # ===========================================================================
  # NVIDIA Graphics Configuration
  # -----------------------------
  # Comprehensive settings for NVIDIA graphics cards using proprietary drivers
  hardware.nvidia = {
    # Modesetting enables better integration with display managers and
    # is required for proper Wayland support
    modesetting.enable = true;

    # Power management features (especially useful for laptops)
    powerManagement.enable = true;

    # Use the open-source Nouveau drivers (false = use proprietary NVIDIA drivers)
    open = false;

    # Enable the NVIDIA Settings application for configuration tweaks
    nvidiaSettings = true;
    package = config.boot.kernelPackages.nvidiaPackages.stable;

    # NVIDIA Optimus configuration for laptops with Intel + NVIDIA GPUs
    prime = {
      sync.enable = true;
      # Bus IDs from your lspci output:
      # Intel: 00:02.0 → "PCI:0:2:0"
      # NVIDIA: 01:00.0 → "PCI:1:0:0"
    intelBusId = "PCI:0:2:0";    # Intel HD Graphics 530 → 00:02.0
    nvidiaBusId = "PCI:1:0:0";   # NVIDIA GTX 960M → 01:00.0
    };
  };

  # Intel Microcode Updates
  # -----------------------
  hardware.cpu.intel.updateMicrocode = true;

  # Graphics Acceleration
  # ---------------------
  # Configures graphics acceleration support for various APIs:
  hardware.graphics = {
    enable = true;
    enable32Bit = true;  # Support 32-bit applications (required for some games)

    # Graphics acceleration packages for 64-bit applications
    extraPackages = with pkgs; [
      vaapiVdpau       # VA-API implementation using VDPAU
      libvdpau-va-gl   # VDPAU driver with VA-API support
      mesa             # Open-source graphics driver
    ] ++ lib.optionals (gpuType == "nvidia" || gpuType == "optimus") [
      nvidia-vaapi-driver  # VA-API implementation for NVIDIA hardware
    ];

    # Graphics acceleration packages for 32-bit applications
    extraPackages32 = with pkgs.pkgsi686Linux; [
      libva            # Video Acceleration API
      mesa             # Open-source graphics driver (32-bit)
    ] ++ lib.optionals (gpuType == "nvidia" || gpuType == "optimus") [
      nvidia-vaapi-driver  # VA-API implementation for NVIDIA hardware (32-bit)
    ];
  };

  # Printing Support
  # ----------------
  # Enables CUPS printing service for printer support
  services.printing.enable = true;

  # Audio Configuration
  # -------------------
  # PipeWire is a modern audio server that replaces PulseAudio and provides
  # low-latency audio processing with compatibility layers
  security.rtkit.enable = true;  # Realtime priority for audio processes
  services.pipewire = {
    enable = true;
    alsa.enable = true;         # ALSA support (kernel-level audio)
    alsa.support32Bit = true;   # 32-bit ALSA application support
    pulse.enable = true;        # PulseAudio compatibility layer
    jack.enable = true;         # JACK audio connection kit support
  };

  # Bluetooth Configuration
  # -----------------------
  hardware.bluetooth = {
    enable = true;              # Enable Bluetooth support
    powerOnBoot = true;         # Turn Bluetooth on at boot
  };
  services.blueman.enable = true;  # GUI Bluetooth manager

  # ===========================================================================
  # SECTION 4: NETWORKING CONFIGURATION
  # ===========================================================================
  networking = {
    # Hostname
    # --------
    # The name by which your system is identified on the network
    hostName = "nixos-btw";

    # Network Manager
    # ---------------
    # A modern network management daemon that handles both wired and
    # wireless connections with a GUI interface
    networkmanager.enable = true;
  };

  # ===========================================================================
  # SECTION 5: INTERNATIONALIZATION (I18N)
  # ===========================================================================
  # Time Configuration
  # ------------------
  time.timeZone = "Europe/Copenhagen";  # Sets system time zone

  # NTP Time Synchronization
  # ------------------------
  # Network Time Protocol service for accurate time synchronization
  services.timesyncd = {
    enable = true;
    servers = [
      "0.dk.pool.ntp.org"
      "1.dk.pool.ntp.org"
      "2.dk.pool.ntp.org"
      "3.dk.pool.ntp.org"
    ];
  };

  # Locale and Language Settings
  # ----------------------------
  i18n = {
    # Default system locale
    defaultLocale = "en_DK.UTF-8";

    # Supported locales on the system
    supportedLocales = [
      "en_DK.UTF-8/UTF-8"
      "da_DK.UTF-8/UTF-8"
    ];

    # Fine-grained locale settings for different categories
    extraLocaleSettings = {
      LANG = "en_DK.UTF-8";
      LC_CTYPE = "en_DK.UTF-8";
      LC_NUMERIC = "da_DK.UTF-8";  # Danish number formatting
      LC_TIME = "da_DK.UTF-8";     # Danish time format (24-hour)
      LC_MONETARY = "da_DK.UTF-8"; # Danish currency format
      LC_ADDRESS = "da_DK.UTF-8";  # Danish address formatting
      LC_IDENTIFICATION = "da_DK.UTF-8";
      LC_MEASUREMENT = "da_DK.UTF-8";  # Danish measurement units
      LC_PAPER = "da_DK.UTF-8";        # Danish paper size (A4)
      LC_TELEPHONE = "da_DK.UTF-8";    # Danish telephone formatting
      LC_NAME = "da_DK.UTF-8";         # Danish name formatting
    };
  };

  # Keyboard Configuration
  # ----------------------
  # X11 keyboard settings (for graphical environment)
  services.xserver.xkb = {
    layout = "dk";    # Danish keyboard layout
    variant = "";     # No special variant
  };



  # Console keyboard settings (for virtual terminals)
  console.keyMap = "dk-latin1";  # Danish keyboard with Latin-1 encoding

  # ===========================================================================
  # SECTION 6: GRAPHICAL ENVIRONMENT
  # ===========================================================================

  services.xserver = {
  enable = true;
  # Add this line to specify the video drivers
  videoDrivers = [ "nvidia" ];
  };

  # X11 Window System
  # -----------------
  # The X Window System provides the foundation for graphical interfaces
  # services.xserver.enable = true;

  # MIME Type Support
  # -----------------
  # Enables file type association database for opening files with appropriate applications
  xdg.mime.enable = true;

  # Display Manager (SDDM)
  # ----------------------
  # Simple Desktop Display Manager - the login screen for KDE Plasma
  services.displayManager.sddm = {
    enable = true;
    wayland.enable = true;  # Enable Wayland session support
  };

  # Desktop Environment (KDE Plasma 6)
  # ----------------------------------
  services.desktopManager.plasma6.enable = true;

  # XDG Desktop Portal
  # ------------------
  # Provides framework for allowing applications to interact with the desktop environment
  xdg.portal = {
    enable = true;
    extraPortals = with pkgs; [
      kdePackages.xdg-desktop-portal-kde  # KDE implementation
      xdg-desktop-portal-gtk              # GTK implementation
    ];
  };

  # DConf Support
  # -------------
  # Required for GNOME/GTK applications to store their settings in KDE
  programs.dconf.enable = true;

  # ===========================================================================
  # SECTION 7: USER CONFIGURATION
  # ===========================================================================
  # Z Shell Configuration
  # ---------------------
  # Zsh is a powerful shell with extensive customization options
  programs.zsh = {
    enable = true;
    ohMyZsh = {
      enable = true;
      plugins = [ "git" "sudo" "systemd" "docker" "kubectl" ];
      theme = "agnoster";  # Popular Zsh theme with git integration
    };
    autosuggestions.enable = true;     # Fish-like autosuggestions
    syntaxHighlighting.enable = true;  # Command syntax highlighting
  };

  # User Account Definition
  # -----------------------
  # /etc/nixos/configuration.nix
  # -----------------------
  # Make your user a trusted user in the Nix daemon
  nix.settings.trusted-users = [ "root" "alice"  "Togo-GT" ];


  users.users.togo-gt = {
    isNormalUser = true;     # Regular user (not system account)
    description = "Togo-GT"; # User description
    extraGroups = [
      "networkmanager"  # Network configuration privileges
      "wheel"           # Administrative privileges (sudo)
      "input"           # Input device access
      "docker"          # Docker management
      "libvirtd"        # Virtualization management
    ];
    shell = pkgs.zsh;        # Default shell
    packages = with pkgs; [
      kdePackages.kate      # Advanced text editor
      # thunderbird        # Email client (commented out)
    ];
  };

  # Security: Automatic Login
  # -------------------------
  # Disabled for security reasons (manual login required)
  services.displayManager.autoLogin.enable = false;

  # Firefox Browser
  # ---------------
  programs.firefox.enable = true;

  # ===========================================================================
  # SECTION 8: PACKAGE MANAGEMENT
  # ===========================================================================
  # Non-Free Software Policy
  # ------------------------
  # Allows installation of proprietary software (required for NVIDIA drivers, etc.)
  nixpkgs.config.allowUnfree = true;

  # Nix Configuration
  # -----------------
  # Settings for the Nix package manager itself
  nix.settings = {
    # Experimental features (flakes are the future of Nix packaging)
    experimental-features = [ "nix-command" "flakes" ];

    # Automatically optimize storage to save space
    auto-optimise-store = true;

    # Binary cache servers for faster package installation
    substituters = [
      "https://cache.nixos.org"
      "https://nix-community.cachix.org"
    ];

    # Trusted public keys for binary caches
    trusted-public-keys = [
      "cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY="
      "nix-community.cachix.org-1:mB9FSh9qf2dCimDSUo8Zy7bkq5CX+/rkCWyvRCYg3Fs="
    ];
  };

  # Automatic Garbage Collection
  # ----------------------------
  # Regularly removes old package versions to save disk space
  nix.gc = {
    automatic = true;           # Run automatically
    dates = "weekly";           # Run once per week
    options = "--delete-older-than 7d";  # Remove packages older than 7 days
  };

  # System Packages
  # ---------------
  # The complete set of packages to be installed on the system
  environment.systemPackages = with pkgs; [
    # -------------------------------------------------------------------------
    # SYSTEM UTILITIES
    # -------------------------------------------------------------------------
    # File Management
    broot          # Terminal file manager with tree view
    dust           # Intuitive disk usage analyzer
    duf            # Disk usage/free utility
    fselect        # Find files with SQL-like queries
    ncdu           # NCurses disk usage analyzer
    zoxide         # Smart directory navigation

    # Text Processing
    bat            # Cat clone with syntax highlighting
    bat-extras.batdiff  # Diff viewer with syntax highlighting
    bat-extras.batgrep  # Grep replacement with syntax highlighting
    bat-extras.batman   # Manual page viewer with syntax highlighting
    bat-extras.batpipe  # Pipe output to bat for syntax highlighting
    micro          # Modern terminal text editor
    neovim         # Vim-fork focused on extensibility
    ripgrep        # Extremely fast grep alternative
    ripgrep-all    # Ripgrep that searches in various file types

    # System Monitoring
    btop           # Modern resource monitor
    bottom         # Graphical process/system monitor
    htop           # Interactive process viewer
    glances        # Cross-platform system monitoring
    iotop          # I/O usage monitoring
    nethogs        # Bandwidth monitoring per process
    # nvtop          # GPU process monitoring
    powertop       # Power usage monitoring

    # Backup & Sync
    borgbackup     # Deduplicating backup program
    rsnapshot      # Filesystem snapshot utility
    rsync          # Versatile file copying tool

    # Utilities
    gitFull        # Complete version control system
    curl           # Data transfer tool
    curlie         # User-friendly curl wrapper
    fzf            # Fuzzy finder
    starship       # Customizable shell prompt
    taskwarrior3   # Command-line task management
    tldr           # Simplified man pages
    tmux           # Terminal multiplexer
    tmuxp          # Tmux session manager
    watch          # Execute program periodically
    zsh            # Z shell
    zsh-autosuggestions    # Fish-like autosuggestions
    zsh-syntax-highlighting # Syntax highlighting

    # Miscellaneous
    aircrack-ng    # WiFi security auditing
    cmatrix        # Falling matrix animation
    file           # File type identification
    fortune        # Random quotes and jokes
    openssl        # Cryptography toolkit

    # -------------------------------------------------------------------------
    # NETWORKING & SECURITY
    # -------------------------------------------------------------------------
    # Network Diagnostics
    iperf3         # Network bandwidth measurement
    nmap           # Network discovery and security auditing
    masscan        # Mass IP port scanner
    tcpdump        # Packet analyzer
    tcpflow        # TCP flow recorder
    traceroute     # Network path tracing

    # Security
    ettercap       # MITM attack suite
    openvpn        # VPN solution
    wireguard-tools # Modern VPN implementation

    # Containerization
    podman         # Daemonless container engine

    # -------------------------------------------------------------------------
    # DEVELOPMENT
    # -------------------------------------------------------------------------
    # Infrastructure as Code
    ansible        # Configuration management
    packer         # Machine image creation
    terraform      # Infrastructure provisioning

    # Containerization
    docker         # Container platform
    docker-compose # Multi-container management

    # Programming Languages
    go             # Go programming language
    nodejs         # JavaScript runtime
    perl           # Perl programming language
    python3        # Python 3 interpreter
    python3Packages.pip # Python package installer
    pipx           # Python application installer
    rustup         # Rust toolchain manager

    # Build Tools
    cmake          # Build system generator
    gcc            # GNU Compiler Collection

    # -------------------------------------------------------------------------
    # GUI APPLICATIONS
    # -------------------------------------------------------------------------
    # Browsers & Communication
    chromium       # Open-source Chrome
    firefox        # Privacy-focused browser
    signal-desktop # Secure messaging
    telegram-desktop # Feature-rich messaging
    thunderbird    # Email client

    # Multimedia
    audacity       # Audio editing
    handbrake      # Video transcoder
    mpv            # Media player
    spotify        # Music streaming
    vlc            # Versatile media player

    # Graphics & Design
    gimp           # Image manipulation
    inkscape       # Vector graphics editor
    krita          # Digital painting
    kdePackages.okular  # Document viewer
    zathura        # Minimalist document viewer

    # Utilities
    distrobox      # Containerized environments
    kdePackages.dolphin   # File manager
    evince         # Document viewer (GNOME)
    feh            # Lightweight image viewer
    gparted        # Partition editor
    kdePackages.konsole   # Terminal emulator
    obs-studio     # Screen recording/streaming
    paprefs        # PulseAudio preferences
    protonup-qt    # Proton-GE management
    transmission_3-gtk # BitTorrent client

    # Gaming
    lutris         # Game management platform
    wine           # Windows compatibility layer

    # -------------------------------------------------------------------------
    # HARDWARE & SYSTEM INFO
    # -------------------------------------------------------------------------
    # GPU & Graphics
    clinfo         # OpenCL information
    glxinfo        # OpenGL information
    vulkan-loader  # Vulkan loader
    vulkan-tools   # Vulkan utilities
    nvidia-vaapi-driver # VA-API for NVIDIA
    # config.boot.kernelPackages.nvidia_x11
    # nvidia-vaapi-driver

    # System Information
    dmidecode      # Hardware information
    inxi           # Comprehensive system info
    pciutils       # PCI bus utilities

    # Storage
    smartmontools  # Disk health monitoring
    ntfs3g         # NTFS read-write driver

    # Gaming Performance
    gamemode       # System optimization for games
    mangohud       # Performance overlay

    # Miscellaneous Hardware
    libnotify      # Desktop notifications
    libva-utils    # Video Acceleration utilities
  ];

  # ===========================================================================
  # SECTION 9: SYSTEM SERVICES
  # ===========================================================================
  # Storage Optimization
  # --------------------
  services.fstrim.enable = true;  # TRIM support for SSDs

  # Memory Management
  # -----------------
  services.earlyoom.enable = true;  # Early Out-of-Memory daemon

  # Application Distribution
  # ------------------------
  services.flatpak.enable = true;  # Flatpak support

  # -----------------------------
  # Power Management - Using TLP
  # ----------------------------
  # Disable power-profiles-daemon at the system level
  # This prevents conflicts with TLP by stopping the daemon that manages power profiles
    services.power-profiles-daemon.enable = lib.mkForce false;

  # -----------------------------
  # Disable power-profiles-daemon at the user level
  # Stops user-level power-profiles-daemon so it cannot interfere with TLP
   systemd.user.services."power-profiles-daemon" = {
   enable = false;          # Do not start the user service
   wantedBy = lib.mkForce []; # Ensure no default targets request it
  };

  # -----------------------------
  # Enable TLP service for laptop power management
  # This service manages CPU frequency, battery, and power-saving settings
  services.tlp = {
  enable = true;            # Turn on TLP
  settings = {
    # CPU scaling governor when on AC power
    # 'performance' keeps CPU running fast for maximum performance
    CPU_SCALING_GOVERNOR_ON_AC = "performance";

    # CPU scaling governor when on battery
    # 'powersave' reduces CPU speed to save battery
    CPU_SCALING_GOVERNOR_ON_BAT = "powersave";

    # You can add more TLP settings here, e.g.,
    # DISK_IDLE_SECS_ON_AC = 0          # Disable disk spindown on AC
    # DISK_IDLE_SECS_ON_BAT = 2         # Spin down disks after 2 seconds on battery
    # SCHED_POWERSAVE_ON_AC = 0         # Scheduler optimization for AC
    # SCHED_POWERSAVE_ON_BAT = 1        # Scheduler optimization for battery
  };
};


  # Gaming Support
  # --------------
  programs.steam = {
    enable = true;
    remotePlay.openFirewall = true;
    dedicatedServer.openFirewall = true;
  };
  programs.gamescope.enable = true;   # SteamOS compositor
  programs.gamemode.enable = true;    # Gaming performance optimizer

  # Hardware Monitoring
  # -------------------
  services.hardware.bolt.enable = true;  # Thunderbolt support

  # Virtualization
  # --------------
  virtualisation = {
    docker = {
      enable = true;
      rootless = {
        enable = true;
        setSocketVariable = true;
      };
    };
    libvirtd = {
      enable = true;
      qemu = {
        runAsRoot = true;
        swtpm.enable = true;  # Software TPM support
      };
    };
  };

  # Additional Services
  # -------------------
  services = {
    avahi = {           # Network service discovery
      enable = true;
      nssmdns4 = true;
    };
    fwupd.enable = true;        # Firmware updates
    thermald.enable = true;     # Thermal management
  };

  # ===========================================================================
  # SECTION 10: FONT CONFIGURATION
  # ===========================================================================
  fonts = {
    enableDefaultPackages = true;
    packages = with pkgs; [
      noto-fonts            # Google's font family
      noto-fonts-cjk-sans   # CJK sans-serif fonts
      noto-fonts-emoji      # Emoji font
      nerd-fonts.fira-code  # Programming font with ligatures
      nerd-fonts.jetbrains-mono # Programming font
    ];
    fontconfig = {
      defaultFonts = {
        monospace = [ "JetBrainsMono Nerd Font" "Noto Sans Mono" ];
        sansSerif = [ "Noto Sans" ];
        serif = [ "Noto Serif" ];
      };
    };
  };

  # ===========================================================================
  # SECTION 11: SECURITY CONFIGURATION
  # ===========================================================================
  # Remote Access
  # -------------
  services.openssh.enable = true;  # SSH server

  # Firewall Configuration
  # ----------------------
  networking.firewall = {
    allowedTCPPorts = [
      22    # SSH
      80    # HTTP
      443   # HTTPS
      27036 # Steam
      27037 # Steam
    ];
    allowedUDPPorts = [
      27031 # Steam
      27036 # Steam
      3659  # Lunar Client (Minecraft)
    ];
  };

  # Security Policies
  # -----------------
  security = {
    sudo = {
      wheelNeedsPassword = true;  # Require password for sudo
      execWheelOnly = true;       # Only wheel group can use sudo
    };
    protectKernelImage = true;    # Protect kernel from modification
    auditd.enable = true;         # System auditing
  };

  # ===========================================================================
  # SECTION 12: SYSTEM STATE VERSION
  # ===========================================================================
  # This setting maintains compatibility with future NixOS releases
  # It should generally not be changed after initial installation
  system.stateVersion = "25.05";
}
